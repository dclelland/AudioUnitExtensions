//
//  AudioUnit+Listeners.swift
//  Pods
//
//  Created by Daniel Clelland on 02/04/17.
//

import Foundation
import AudioToolbox

// MARK: - AudioUnit listeners

extension AudioUnit {
    
    /// Adds a listener block for a property that changes.
    public func add(listener: AudioUnitPropertyListener, to property: AudioUnitPropertyID) {
        try! addPropertyListener(listener, toProperty: property)
    }
    
    /// Removes a listener block for a property that changes.
    public func remove(listener: AudioUnitPropertyListener, from property: AudioUnitPropertyID) {
        try! removePropertyListener(listener, fromProperty: property)
    }
    
}

// MARK: - AudioUnit callbacks

/// A structure that contains the autogenerated Proc and pointer for adding/removing to an AudioUnit.
public struct AudioUnitPropertyListener {
    
    /// A callback block, executed when an audio unit property changes.
    public typealias Callback = (_ audioUnit: AudioUnit, _ property: AudioUnitPropertyID) -> Void
    
    fileprivate let proc: AudioUnitPropertyListenerProc
    
    fileprivate let procInput: UnsafeMutablePointer<Callback>
    
    /// Initialise a property listener with a callback block.
    public init(_ callback: @escaping Callback) {
        self.proc = { (inRefCon, inUnit, inID, inScope, inElement) in
            inRefCon.assumingMemoryBound(to: Callback.self).pointee(inUnit, inID)
        }
        
        self.procInput = UnsafeMutablePointer<Callback>.allocate(capacity: MemoryLayout<Callback>.stride)
        self.procInput.initialize(to: callback)
    }
    
}

// MARK: - Private methods

fileprivate extension AudioUnit {
    
    func addPropertyListener(_ listener: AudioUnitPropertyListener, toProperty propertyID: AudioUnitPropertyID) throws {
        try AudioUnitAddPropertyListener(self, propertyID, listener.proc, listener.procInput).check()
    }
    
    func removePropertyListener(_ listener: AudioUnitPropertyListener, fromProperty propertyID: AudioUnitPropertyID) throws {
        try AudioUnitRemovePropertyListenerWithUserData(self, propertyID, listener.proc, listener.procInput).check()
    }
    
}
